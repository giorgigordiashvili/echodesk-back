# Generated by Django 4.2.23 on 2025-09-03 01:05

from django.db import migrations
from django.contrib.auth import get_user_model

def create_default_board_and_assign_columns(apps, schema_editor):
    """Create a default board and assign all existing columns to it."""
    Board = apps.get_model('tickets', 'Board')
    TicketColumn = apps.get_model('tickets', 'TicketColumn')
    User = apps.get_model('users', 'User')  # Use apps.get_model instead of get_user_model()
    
    # Get all existing columns that don't have a board
    columns_without_board = TicketColumn.objects.filter(board__isnull=True)
    
    if columns_without_board.exists():
        # Get the first superuser or staff user to be the creator
        creator = User.objects.filter(is_staff=True).first()
        if not creator:
            # If no staff users exist, get the first user
            creator = User.objects.first()
        
        if creator:
            # Create a default board
            default_board = Board.objects.create(
                name='Main Board',
                description='Default kanban board created during migration',
                is_default=True,
                created_by=creator
            )
            
            # Assign all existing columns to the default board
            columns_without_board.update(board=default_board)

def reverse_migration(apps, schema_editor):
    """Remove board assignments (this will be handled by foreign key constraints)."""
    # We don't need to do anything here as the foreign key will handle cleanup
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('tickets', '0007_board_alter_ticketcolumn_unique_together_and_more'),
    ]

    operations = [
        migrations.RunPython(create_default_board_and_assign_columns, reverse_migration),
    ]
