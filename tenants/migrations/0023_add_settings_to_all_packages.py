# Generated by Django 4.2.24 on 2025-11-01 13:30

from django.db import migrations


def add_settings_to_all_packages(apps, schema_editor):
    """
    Add settings feature to all packages

    Since settings is a core feature (free, $0), it should be available
    to all users regardless of their package.
    """
    Package = apps.get_model('tenants', 'Package')
    Feature = apps.get_model('tenants', 'Feature')
    PackageFeature = apps.get_model('tenants', 'PackageFeature')

    # Get the settings feature
    try:
        settings_feature = Feature.objects.get(key='settings')
        print(f"✅ Found settings feature (ID: {settings_feature.id})")
    except Feature.DoesNotExist:
        print("⚠️  Settings feature not found. Run migration 0022 first.")
        return

    # Get all packages
    packages = Package.objects.all()

    if not packages.exists():
        print("⚠️  No packages found in the system")
        return

    added_count = 0
    skipped_count = 0

    for package in packages:
        # Check if already exists
        pf, created = PackageFeature.objects.get_or_create(
            package=package,
            feature=settings_feature
        )

        if created:
            print(f"✅ Added settings to '{package.name}' package")
            added_count += 1
        else:
            print(f"ℹ️  '{package.name}' already has settings")
            skipped_count += 1

    print(f"\n📊 Summary:")
    print(f"   - Packages updated: {added_count}")
    print(f"   - Already had feature: {skipped_count}")
    print(f"   - Total packages: {packages.count()}")


def remove_settings_from_all_packages(apps, schema_editor):
    """
    Reverse migration: Remove settings from all packages
    """
    Feature = apps.get_model('tenants', 'Feature')
    PackageFeature = apps.get_model('tenants', 'PackageFeature')

    try:
        settings_feature = Feature.objects.get(key='settings')
        deleted_count = PackageFeature.objects.filter(
            feature=settings_feature
        ).delete()[0]
        print(f"❌ Removed settings from {deleted_count} package(s)")
    except Feature.DoesNotExist:
        print("⚠️  Settings feature not found")


class Migration(migrations.Migration):

    dependencies = [
        ('tenants', '0022_add_settings_feature'),
    ]

    operations = [
        migrations.RunPython(
            add_settings_to_all_packages,
            remove_settings_from_all_packages
        ),
    ]
