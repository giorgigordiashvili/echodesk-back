# Generated by Django 4.2.24 on 2025-11-01 13:33

from django.db import migrations


def add_missing_ticket_permissions(apps, schema_editor):
    """
    Add all tickets app permissions to ticket_management feature

    The ticket_management feature currently has HR permissions but is missing
    core ticket permissions. This adds all remaining tickets app permissions.
    """
    Feature = apps.get_model('tenants', 'Feature')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    FeaturePermission = apps.get_model('tenants', 'FeaturePermission')

    # Get the ticket_management feature
    try:
        ticket_feature = Feature.objects.get(key='ticket_management')
        print(f"✅ Found ticket_management feature (ID: {ticket_feature.id})")
    except Feature.DoesNotExist:
        print("⚠️  ticket_management feature not found")
        return

    # Get all tickets app permissions
    try:
        tickets_content_types = list(ContentType.objects.filter(app_label='tickets'))

        if not tickets_content_types:
            print("⚠️  No content types found for tickets app")
            return

        # Get all permissions for tickets models
        tickets_permissions = Permission.objects.filter(
            content_type__in=tickets_content_types
        )

        if not tickets_permissions.exists():
            print("⚠️  No permissions found for tickets app")
            return

        # Add all permissions to the feature
        permission_count = 0
        added_permissions = {}

        for permission in tickets_permissions:
            fp, created = FeaturePermission.objects.get_or_create(
                feature=ticket_feature,
                permission=permission,
                defaults={'is_required': False}
            )

            if created:
                permission_count += 1
                model_name = permission.content_type.model
                if model_name not in added_permissions:
                    added_permissions[model_name] = []
                added_permissions[model_name].append(permission.codename)

        print(f"✅ Added {permission_count} new permissions to ticket_management feature:")

        # Group permissions by model for better readability
        for model, perms in sorted(added_permissions.items()):
            print(f"   - {model}: {', '.join(sorted(perms))}")

    except Exception as e:
        print(f"❌ Error: {str(e)}")


def remove_ticket_permissions(apps, schema_editor):
    """
    Reverse migration: Remove tickets permissions from ticket_management feature

    Note: This only removes permissions added in this migration,
    not the original HR permissions
    """
    Feature = apps.get_model('tenants', 'Feature')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    FeaturePermission = apps.get_model('tenants', 'FeaturePermission')

    try:
        ticket_feature = Feature.objects.get(key='ticket_management')
        tickets_content_types = list(ContentType.objects.filter(app_label='tickets'))

        # Delete all FeaturePermission entries for this feature and tickets app
        deleted_count = FeaturePermission.objects.filter(
            feature=ticket_feature,
            permission__content_type__in=tickets_content_types
        ).delete()[0]

        print(f"❌ Removed {deleted_count} tickets permissions from ticket_management feature")
    except Feature.DoesNotExist:
        print("⚠️  ticket_management feature not found")


class Migration(migrations.Migration):

    dependencies = [
        ('tenants', '0023_add_settings_to_all_packages'),
        ('tickets', '0026_tickethistory'),  # Ensure ticket models exist
    ]

    operations = [
        migrations.RunPython(
            add_missing_ticket_permissions,
            remove_ticket_permissions
        ),
    ]
