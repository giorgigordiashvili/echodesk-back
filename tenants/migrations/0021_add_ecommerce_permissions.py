# Generated by Django 4.2.24 on 2025-11-01 13:30

from django.db import migrations


def add_ecommerce_permissions_to_feature(apps, schema_editor):
    """
    Add all ecommerce_crm permissions to the ecommerce_crm feature

    This allows the feature system to properly manage access to e-commerce functionality.
    Permissions will be automatically granted to users based on their feature access.
    """
    Feature = apps.get_model('tenants', 'Feature')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    FeaturePermission = apps.get_model('tenants', 'FeaturePermission')

    # Get the ecommerce_crm feature
    try:
        ecommerce_feature = Feature.objects.get(key='ecommerce_crm')
        print(f"✅ Found ecommerce_crm feature (ID: {ecommerce_feature.id})")
    except Feature.DoesNotExist:
        print("⚠️  ecommerce_crm feature not found. Run migration 0019 first.")
        return

    # Get ContentType for ecommerce_crm app
    try:
        ecommerce_content_types = list(ContentType.objects.filter(app_label='ecommerce_crm'))

        if not ecommerce_content_types:
            print("⚠️  No content types found for ecommerce_crm app. Make sure ecommerce_crm migrations are applied.")
            return

        # Get all permissions for ecommerce_crm models
        ecommerce_permissions = Permission.objects.filter(
            content_type__in=ecommerce_content_types
        )

        if not ecommerce_permissions.exists():
            print("⚠️  No permissions found for ecommerce_crm app.")
            return

        # Add all permissions to the feature using FeaturePermission
        permission_count = 0
        for permission in ecommerce_permissions:
            FeaturePermission.objects.get_or_create(
                feature=ecommerce_feature,
                permission=permission,
                defaults={'is_required': False}
            )
            permission_count += 1

        print(f"✅ Added {permission_count} permissions to ecommerce_crm feature:")

        # Group permissions by model for better readability
        models = {}
        for perm in ecommerce_permissions:
            model_name = perm.content_type.model
            if model_name not in models:
                models[model_name] = []
            models[model_name].append(perm.codename)

        for model, perms in sorted(models.items()):
            print(f"   - {model}: {', '.join(perms)}")

    except Exception as e:
        print(f"❌ Error: {str(e)}")


def remove_ecommerce_permissions_from_feature(apps, schema_editor):
    """
    Reverse migration: Remove ecommerce permissions from feature
    """
    Feature = apps.get_model('tenants', 'Feature')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    FeaturePermission = apps.get_model('tenants', 'FeaturePermission')

    try:
        ecommerce_feature = Feature.objects.get(key='ecommerce_crm')
        ecommerce_content_types = list(ContentType.objects.filter(app_label='ecommerce_crm'))

        # Delete all FeaturePermission entries for this feature and these content types
        deleted_count = FeaturePermission.objects.filter(
            feature=ecommerce_feature,
            permission__content_type__in=ecommerce_content_types
        ).delete()[0]

        print(f"❌ Removed {deleted_count} permissions from ecommerce_crm feature")
    except Feature.DoesNotExist:
        print("⚠️  ecommerce_crm feature not found")


class Migration(migrations.Migration):

    dependencies = [
        ('tenants', '0020_add_ecommerce_to_packages'),
        ('ecommerce_crm', '0001_initial'),  # Ensure ecommerce models exist
    ]

    operations = [
        migrations.RunPython(
            add_ecommerce_permissions_to_feature,
            remove_ecommerce_permissions_from_feature
        ),
    ]
