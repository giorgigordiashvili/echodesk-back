# Generated by Django 4.2.24 on 2025-11-01 13:28

from django.db import migrations


def create_settings_feature(apps, schema_editor):
    """
    Create the settings feature with all related permissions

    Settings includes:
    - Tenant settings (logo, company name, ticket settings)
    - Item Lists management
    - Ticket Forms management
    - Subscription & billing management
    """
    Feature = apps.get_model('tenants', 'Feature')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    FeaturePermission = apps.get_model('tenants', 'FeaturePermission')

    # Create the settings feature
    settings_feature, created = Feature.objects.get_or_create(
        key='settings',
        defaults={
            'name': 'Settings',
            'description': 'Access to system settings including tenant configuration, item lists, ticket forms, and subscription management',
            'category': 'core',
            'price_per_user_gel': 0.00,  # Free - included in all packages
            'price_unlimited_gel': 0.00,
            'icon': '⚙️',
            'sort_order': 100,
            'is_active': True,
        }
    )

    if created:
        print(f"✅ Created settings feature (ID: {settings_feature.id})")
    else:
        print(f"ℹ️  Settings feature already exists (ID: {settings_feature.id})")

    # Define permissions to add to the feature
    permission_specs = [
        # Tenant model - for general settings (logo, company name, ticket settings)
        ('tenants', 'tenant', ['view_tenant', 'change_tenant']),

        # Item Lists - for settings/item-lists
        ('tickets', 'itemlist', ['view_itemlist', 'add_itemlist', 'change_itemlist', 'delete_itemlist']),
        ('tickets', 'listitem', ['view_listitem', 'add_listitem', 'change_listitem', 'delete_listitem']),

        # Ticket Forms - for settings/ticket-forms
        ('tickets', 'ticketform', ['view_ticketform', 'add_ticketform', 'change_ticketform', 'delete_ticketform']),
        ('tickets', 'ticketformsubmission', ['view_ticketformsubmission', 'delete_ticketformsubmission']),

        # Subscription & Billing - for settings/subscription
        ('tenants', 'tenantsubscription', ['view_tenantsubscription', 'change_tenantsubscription']),
        ('tenants', 'package', ['view_package']),
        ('tenants', 'paymentorder', ['view_paymentorder']),
        ('tenants', 'savedcard', ['view_savedcard', 'delete_savedcard']),
        ('tenants', 'usagelog', ['view_usagelog']),
    ]

    permission_count = 0
    added_permissions = {}

    for app_label, model, codenames in permission_specs:
        try:
            # Get content type
            content_type = ContentType.objects.get(app_label=app_label, model=model)

            # Get permissions
            for codename in codenames:
                try:
                    permission = Permission.objects.get(
                        content_type=content_type,
                        codename=codename
                    )

                    # Add permission to feature
                    fp, created = FeaturePermission.objects.get_or_create(
                        feature=settings_feature,
                        permission=permission,
                        defaults={'is_required': False}
                    )

                    if created:
                        permission_count += 1
                        if model not in added_permissions:
                            added_permissions[model] = []
                        added_permissions[model].append(codename)

                except Permission.DoesNotExist:
                    print(f"⚠️  Permission not found: {app_label}.{codename}")

        except ContentType.DoesNotExist:
            print(f"⚠️  Content type not found: {app_label}.{model}")

    print(f"\n✅ Added {permission_count} permissions to settings feature:")
    for model, perms in sorted(added_permissions.items()):
        print(f"   - {model}: {', '.join(perms)}")


def remove_settings_feature(apps, schema_editor):
    """
    Reverse migration: Remove the settings feature
    """
    Feature = apps.get_model('tenants', 'Feature')

    try:
        settings_feature = Feature.objects.get(key='settings')
        settings_feature.delete()
        print("❌ Removed settings feature")
    except Feature.DoesNotExist:
        print("⚠️  Settings feature not found")


class Migration(migrations.Migration):

    dependencies = [
        ('tenants', '0021_add_ecommerce_permissions'),
        ('tickets', '0026_tickethistory'),  # Ensure ticket models exist
    ]

    operations = [
        migrations.RunPython(
            create_settings_feature,
            remove_settings_feature
        ),
    ]
