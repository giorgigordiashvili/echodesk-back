# Generated by Django 4.2.24 on 2025-11-01 12:36

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AttributeDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.JSONField(help_text="Attribute name in different languages: {'en': 'Color', 'ka': 'ფერი', 'ru': 'Цвет'}")),
                ('key', models.CharField(help_text="Unique key for code reference (e.g., 'color', 'size')", max_length=100, unique=True)),
                ('attribute_type', models.CharField(choices=[('text', 'Text'), ('number', 'Number'), ('boolean', 'Boolean'), ('select', 'Single Select'), ('multiselect', 'Multi Select'), ('color', 'Color'), ('date', 'Date')], default='text', max_length=20)),
                ('options', models.JSONField(blank=True, default=list, help_text="For select/multiselect types: [{'en': 'Red', 'ka': 'წითელი', 'ru': 'Красный', 'value': 'red'}, ...]")),
                ('unit', models.CharField(blank=True, help_text="Unit of measurement (e.g., 'cm', 'kg', 'ml')", max_length=50)),
                ('is_required', models.BooleanField(default=False)),
                ('is_variant_attribute', models.BooleanField(default=False, help_text='If True, this attribute can be used to create product variants (e.g., Size, Color)')),
                ('is_filterable', models.BooleanField(default=True, help_text='Whether this attribute can be used for filtering products')),
                ('sort_order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Attribute Definition',
                'verbose_name_plural': 'Attribute Definitions',
                'ordering': ['sort_order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(help_text='Stock Keeping Unit', max_length=100, unique=True)),
                ('name', models.JSONField(help_text="Product name in different languages: {'en': 'Laptop', 'ka': 'ლეპტოპი', 'ru': 'Ноутбук'}")),
                ('description', models.JSONField(blank=True, default=dict, help_text='Product description in different languages')),
                ('short_description', models.JSONField(blank=True, default=dict, help_text='Short product description in different languages')),
                ('price', models.DecimalField(decimal_places=2, help_text='Base price in GEL', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('compare_at_price', models.DecimalField(blank=True, decimal_places=2, help_text='Original price for showing discounts', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, help_text='Cost price for profit calculation', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('image', models.ImageField(blank=True, help_text='Main product image', null=True, upload_to='products/')),
                ('track_inventory', models.BooleanField(default=True)),
                ('quantity', models.IntegerField(default=0, help_text='Stock quantity')),
                ('low_stock_threshold', models.IntegerField(default=10, help_text='Alert when stock falls below this level')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('inactive', 'Inactive'), ('out_of_stock', 'Out of Stock')], default='draft', max_length=20)),
                ('is_featured', models.BooleanField(default=False)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=10, null=True)),
                ('dimensions', models.JSONField(blank=True, default=dict, help_text="Dimensions: {'length': 10, 'width': 5, 'height': 3, 'unit': 'cm'}")),
                ('meta_title', models.JSONField(blank=True, default=dict, help_text='SEO title in different languages')),
                ('meta_description', models.JSONField(blank=True, default=dict, help_text='SEO description in different languages')),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductAttributeValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_text', models.TextField(blank=True)),
                ('value_number', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('value_boolean', models.BooleanField(blank=True, null=True)),
                ('value_date', models.DateField(blank=True, null=True)),
                ('value_json', models.JSONField(blank=True, default=dict, help_text='For complex values like multiselect or multilanguage text')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Product Attribute Value',
                'verbose_name_plural': 'Product Attribute Values',
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.JSONField(help_text="Category name in different languages: {'en': 'Electronics', 'ka': 'ელექტრონიკა', 'ru': 'Электроника'}")),
                ('description', models.JSONField(blank=True, default=dict, help_text='Category description in different languages')),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='product_categories/')),
                ('sort_order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Product Category',
                'verbose_name_plural': 'Product Categories',
                'ordering': ['sort_order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='products/gallery/')),
                ('alt_text', models.JSONField(blank=True, default=dict, help_text='Alt text in different languages for SEO')),
                ('sort_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'ordering': ['sort_order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ProductType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.JSONField(help_text="Type name in different languages: {'en': 'Electronics', 'ka': 'ელექტრონიკა', 'ru': 'Электроника'}")),
                ('key', models.CharField(help_text="Unique key for code reference (e.g., 'electronics', 'clothing')", max_length=100, unique=True)),
                ('description', models.JSONField(blank=True, default=dict, help_text='Type description in different languages')),
                ('icon', models.CharField(blank=True, help_text='Icon name or emoji', max_length=50)),
                ('sort_order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Product Type',
                'verbose_name_plural': 'Product Types',
                'ordering': ['sort_order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(help_text='Variant SKU', max_length=100, unique=True)),
                ('name', models.JSONField(help_text="Variant name in different languages: {'en': 'Blue - Large', 'ka': 'ლურჯი - დიდი'}")),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='Variant price (if different from base product)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('quantity', models.IntegerField(default=0)),
                ('image', models.ImageField(blank=True, null=True, upload_to='products/variants/')),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='ecommerce_crm.product')),
            ],
            options={
                'verbose_name': 'Product Variant',
                'verbose_name_plural': 'Product Variants',
                'ordering': ['sort_order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariantAttributeValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_json', models.JSONField(help_text='Attribute value for this variant')),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce_crm.attributedefinition')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attribute_values', to='ecommerce_crm.productvariant')),
            ],
            options={
                'verbose_name': 'Variant Attribute Value',
                'verbose_name_plural': 'Variant Attribute Values',
            },
        ),
        migrations.CreateModel(
            name='ProductTypeAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_required', models.BooleanField(default=False, help_text="Override the attribute's default is_required setting for this product type")),
                ('sort_order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_types', to='ecommerce_crm.attributedefinition')),
                ('product_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='type_attributes', to='ecommerce_crm.producttype')),
            ],
            options={
                'verbose_name': 'Product Type Attribute',
                'verbose_name_plural': 'Product Type Attributes',
                'ordering': ['sort_order', 'id'],
            },
        ),
        migrations.AddIndex(
            model_name='producttype',
            index=models.Index(fields=['key'], name='ecommerce_c_key_b2c394_idx'),
        ),
        migrations.AddIndex(
            model_name='producttype',
            index=models.Index(fields=['is_active', 'sort_order'], name='ecommerce_c_is_acti_798f6c_idx'),
        ),
        migrations.AddField(
            model_name='productimage',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='ecommerce_crm.product'),
        ),
        migrations.AddField(
            model_name='productcategory',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_categories', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='productcategory',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='ecommerce_crm.productcategory'),
        ),
        migrations.AddField(
            model_name='productattributevalue',
            name='attribute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_values', to='ecommerce_crm.attributedefinition'),
        ),
        migrations.AddField(
            model_name='productattributevalue',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attribute_values', to='ecommerce_crm.product'),
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='ecommerce_crm.productcategory'),
        ),
        migrations.AddField(
            model_name='product',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_products', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='product',
            name='product_type',
            field=models.ForeignKey(help_text='Product type determines available attributes', on_delete=django.db.models.deletion.PROTECT, related_name='products', to='ecommerce_crm.producttype'),
        ),
        migrations.AddField(
            model_name='product',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_products', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='attributedefinition',
            index=models.Index(fields=['key'], name='ecommerce_c_key_030ee3_idx'),
        ),
        migrations.AddIndex(
            model_name='attributedefinition',
            index=models.Index(fields=['is_active', 'sort_order'], name='ecommerce_c_is_acti_bbea4b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productvariantattributevalue',
            unique_together={('variant', 'attribute')},
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['product', 'is_active'], name='ecommerce_c_product_09ecd0_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['sku'], name='ecommerce_c_sku_404d01_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='producttypeattribute',
            unique_together={('product_type', 'attribute')},
        ),
        migrations.AddIndex(
            model_name='productcategory',
            index=models.Index(fields=['slug'], name='ecommerce_c_slug_489adc_idx'),
        ),
        migrations.AddIndex(
            model_name='productcategory',
            index=models.Index(fields=['is_active', 'sort_order'], name='ecommerce_c_is_acti_5ef14d_idx'),
        ),
        migrations.AddIndex(
            model_name='productattributevalue',
            index=models.Index(fields=['product', 'attribute'], name='ecommerce_c_product_6482c8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productattributevalue',
            unique_together={('product', 'attribute')},
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['sku'], name='ecommerce_c_sku_3642b4_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['slug'], name='ecommerce_c_slug_328cc9_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status', '-created_at'], name='ecommerce_c_status_d093bf_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'status'], name='ecommerce_c_categor_4e8b97_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['is_featured', 'status'], name='ecommerce_c_is_feat_42b8b8_idx'),
        ),
    ]
