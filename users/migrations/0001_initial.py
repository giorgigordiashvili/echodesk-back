# Generated by examining production database structure on 2025-08-21
# This migration consolidates all previous migrations into a single comprehensive migration
# Based on actual database structure in amanati schema

from django.conf import settings
from django.db import migrations, models
import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        # Create Department model
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        
        # Create TenantGroup model
        migrations.CreateModel(
            name='TenantGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
                ('description', models.TextField(blank=True)),
                ('can_view_all_tickets', models.BooleanField(default=False, help_text='Members can view all tickets in the tenant')),
                ('can_manage_users', models.BooleanField(default=False, help_text='Members can manage user accounts')),
                ('can_make_calls', models.BooleanField(default=False, help_text='Members can make phone calls')),
                ('can_manage_groups', models.BooleanField(default=False, help_text='Members can manage groups')),
                ('can_manage_settings', models.BooleanField(default=False, help_text='Members can manage tenant settings')),
                ('can_create_tickets', models.BooleanField(default=True, help_text='Members can create new tickets')),
                ('can_edit_own_tickets', models.BooleanField(default=True, help_text='Members can edit their own tickets')),
                ('can_edit_all_tickets', models.BooleanField(default=False, help_text='Members can edit any ticket')),
                ('can_delete_tickets', models.BooleanField(default=False, help_text='Members can delete tickets')),
                ('can_assign_tickets', models.BooleanField(default=False, help_text='Members can assign tickets to others')),
                ('can_view_reports', models.BooleanField(default=False, help_text='Members can view analytics and reports')),
                ('can_export_data', models.BooleanField(default=False, help_text='Members can export data')),
                ('can_manage_tags', models.BooleanField(default=False, help_text='Members can manage ticket tags')),
                ('can_manage_columns', models.BooleanField(default=False, help_text='Members can manage kanban board columns')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
                'ordering': ['name'],
            },
        ),
        
        # Create User model
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('manager', 'Manager'), ('agent', 'Agent'), ('viewer', 'Viewer')], default='agent', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended'), ('pending', 'Pending Activation')], default='active', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('job_title', models.CharField(blank=True, max_length=100)),
                
                # Permission flags
                ('can_view_all_tickets', models.BooleanField(default=False)),
                ('can_manage_users', models.BooleanField(default=False)),
                ('can_make_calls', models.BooleanField(default=False)),
                ('can_manage_groups', models.BooleanField(default=False)),
                ('can_manage_settings', models.BooleanField(default=False)),
                ('can_create_tickets', models.BooleanField(default=True)),
                ('can_edit_own_tickets', models.BooleanField(default=True)),
                ('can_edit_all_tickets', models.BooleanField(default=False)),
                ('can_delete_tickets', models.BooleanField(default=False)),
                ('can_assign_tickets', models.BooleanField(default=False)),
                ('can_view_reports', models.BooleanField(default=False)),
                ('can_export_data', models.BooleanField(default=False)),
                ('can_manage_tags', models.BooleanField(default=False)),
                ('can_manage_columns', models.BooleanField(default=False)),
                
                # Timestamps and invitation tracking
                ('invitation_sent_at', models.DateTimeField(blank=True, null=True)),
                
                # Foreign key relationships
                ('invited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invited_users', to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(blank=True, help_text='Department this user belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='users.department')),
                ('primary_group', models.ForeignKey(blank=True, help_text='Primary group for this user', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_members', to='users.tenantgroup')),
                
                # Many-to-many relationships
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('tenant_groups', models.ManyToManyField(blank=True, related_name='members', to='users.tenantgroup')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', users.models.UserManager()),
            ],
        ),
    ]
