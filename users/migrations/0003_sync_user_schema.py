# Generated by Django 4.2.16 on 2025-07-30 22:45

from django.db import migrations


def ensure_user_schema_columns(apps, schema_editor):
    """
    Ensure all User model columns exist in the database.
    This fixes the issue where migrations were marked as applied but columns weren't created.
    """
    with schema_editor.connection.cursor() as cursor:
        # Get the current schema name
        cursor.execute("SELECT current_schema()")
        schema_name = cursor.fetchone()[0]
        
        print(f"Syncing user schema for: {schema_name}")
        
        # List of columns that should exist based on the User model
        required_columns = [
            ('role', 'varchar(20)', "'agent'"),
            ('status', 'varchar(20)', "'active'"),
            ('department', 'varchar(100)', None),
            ('phone_number', 'varchar(20)', None),
            ('job_title', 'varchar(100)', None),
            ('can_view_all_tickets', 'boolean', 'false'),
            ('can_manage_users', 'boolean', 'false'),
            ('can_view_reports', 'boolean', 'false'),
            ('can_manage_settings', 'boolean', 'false'),
            ('invited_by_id', 'bigint', None),
            ('invitation_sent_at', 'timestamp with time zone', None),
        ]
        
        # Check which columns exist
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'users_user' 
            AND table_schema = %s
        """, [schema_name])
        
        existing_columns = {row[0] for row in cursor.fetchall()}
        
        # Add missing columns
        for col_name, col_type, default_value in required_columns:
            if col_name not in existing_columns:
                print(f"Adding missing column: {col_name}")
                
                if default_value:
                    cursor.execute(f"""
                        ALTER TABLE users_user 
                        ADD COLUMN {col_name} {col_type} DEFAULT {default_value}
                    """)
                else:
                    cursor.execute(f"""
                        ALTER TABLE users_user 
                        ADD COLUMN {col_name} {col_type}
                    """)
        
        # Add foreign key constraint for invited_by if it doesn't exist
        if 'invited_by_id' not in existing_columns:
            try:
                cursor.execute("""
                    ALTER TABLE users_user 
                    ADD CONSTRAINT users_user_invited_by_id_fkey 
                    FOREIGN KEY (invited_by_id) REFERENCES users_user(id) ON DELETE SET NULL
                """)
                print("Added foreign key constraint for invited_by_id")
            except Exception as e:
                print(f"Foreign key constraint might already exist: {e}")


def reverse_sync_user_schema(apps, schema_editor):
    """Reverse operation - this is a no-op as we don't want to drop columns"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0002_alter_user_options_user_can_manage_settings_and_more'),
    ]

    operations = [
        migrations.RunPython(ensure_user_schema_columns, reverse_sync_user_schema),
    ]
